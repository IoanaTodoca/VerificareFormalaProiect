(base) ┌──(kali㉿kali)-[~]
└─$ conda activate alpha-beta-crown
                                                                                                                       
(alpha-beta-crown) ┌──(kali㉿kali)-[~]
└─$ cd /home/kali/alpha-beta-CROWN 
                                                                                                                       
(alpha-beta-crown) ┌──(kali㉿kali)-[~/alpha-beta-CROWN]
└─$ cd complete_verifier          
                                                                                                                       
(alpha-beta-crown) ┌──(kali㉿kali)-[~/alpha-beta-CROWN/complete_verifier]
└─$ python abcrown.py --config exp_configs/vnncomp23/acasxu.yaml
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:121: DeprecationWarning: pkg_resources is deprecated as an API
  warnings.warn("pkg_resources is deprecated as an API", DeprecationWarning)
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('paste')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('mpl_toolkits')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('repoze')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('ruamel')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('zc')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('zope')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: max
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: false
  csv_name: instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2023_benchmarks/benchmarks/acasxu
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  no_batchdim_buffers: false
  save_output: false
  output_file: out.pkl
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
  onnx_vnnlib_joint_optimization_flags: none
  check_optmized: false
  flatten_final_output: false
  optimize_graph: null
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 5
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 1000
  auto_enlarge_batch_size: false
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 10
    share_alphas: true
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    apply_output_constraints_to: []
    disable_optimization: []
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 10
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: naive
    candidates: 3
    reduceop: min
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sb_coeff_thresh: 0.01
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      branching_point_refinement: false
      filter: false
      filter_beta: false
      filter_batch_size: 10000
      filter_iterations: 25
      shortlist_size: 500
      loose_tanh_threshold: null
    new_input_split:
      enable: false
      batch_size: 2
      rounds: 1
      init_alpha_batch_size: 8192
      full_alpha: false
    input_split:
      enable: true
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: sb
      enhanced_bound_patience: 20
      attack_patience: 80
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_primary_spec: null
      sb_primary_spec_iter: 1
      sb_sum: false
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_zero_crossing_score: false
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 10000
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  adv_saver: default_adv_saver
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0

Experiments at Fri Dec 22 08:19:27 2023 on kali
no customized start/end sample, testing all samples in instances.csv
Internal results will be saved to out.txt.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx onnx/ACASXU_run2a_1_1_batch_2000.onnx
Using vnnlib vnnlib/prop_1.vnnlib
Precompiled vnnlib file found at ../../vnncomp2023_benchmarks/benchmarks/acasxu/vnnlib/prop_1.vnnlib.compiled
Loading onnx ../../vnncomp2023_benchmarks/benchmarks/acasxu/onnx/ACASXU_run2a_1_1_batch_2000.onnx wih quirks {}
/home/kali/.local/lib/python3.11/site-packages/onnx2pytorch/convert/operations.py:154: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at ../torch/csrc/utils/tensor_numpy.cpp:206.)
  weight = torch.from_numpy(numpy_helper.to_array(params[0]))
/home/kali/.local/lib/python3.11/site-packages/onnx2pytorch/convert/model.py:151: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  warnings.warn(
Traceback (most recent call last):
  File "/home/kali/alpha-beta-CROWN/complete_verifier/abcrown.py", line 612, in <module>
    abcrown.main()
  File "/home/kali/alpha-beta-CROWN/complete_verifier/abcrown.py", line 534, in main
    model_ori = model_ori.to(device)
                ^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/torch/nn/modules/module.py", line 1160, in to
    return self._apply(convert)
           ^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/torch/nn/modules/module.py", line 810, in _apply
    module._apply(fn)
  File "/usr/local/lib/python3.11/dist-packages/torch/nn/modules/module.py", line 833, in _apply
    param_applied = fn(param)
                    ^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/torch/nn/modules/module.py", line 1158, in convert
    return t.to(device, dtype if t.is_floating_point() or t.is_complex() else None, non_blocking)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/torch/cuda/__init__.py", line 298, in _lazy_init
    torch._C._cuda_init()
RuntimeError: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx
                                                                                                                       
(alpha-beta-crown) ┌──(kali㉿kali)-[~/alpha-beta-CROWN/complete_verifier]
└─$ python abcrown.py --config exp_configs/vnncomp23/acasxu.yaml
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:121: DeprecationWarning: pkg_resources is deprecated as an API
  warnings.warn("pkg_resources is deprecated as an API", DeprecationWarning)
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('paste')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('mpl_toolkits')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('repoze')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('ruamel')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('zc')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
/usr/lib/python3/dist-packages/pkg_resources/__init__.py:2870: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('zope')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
Configurations:

general:
  device: cpu
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: max
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: false
  csv_name: instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2023_benchmarks/benchmarks/acasxu
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  no_batchdim_buffers: false
  save_output: false
  output_file: out.pkl
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
  onnx_vnnlib_joint_optimization_flags: none
  check_optmized: false
  flatten_final_output: false
  optimize_graph: null
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 5
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 1000
  auto_enlarge_batch_size: false
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 10
    share_alphas: true
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    apply_output_constraints_to: []
    disable_optimization: []
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 10
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: naive
    candidates: 3
    reduceop: min
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sb_coeff_thresh: 0.01
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      branching_point_refinement: false
      filter: false
      filter_beta: false
      filter_batch_size: 10000
      filter_iterations: 25
      shortlist_size: 500
      loose_tanh_threshold: null
    new_input_split:
      enable: false
      batch_size: 2
      rounds: 1
      init_alpha_batch_size: 8192
      full_alpha: false
    input_split:
      enable: true
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: sb
      enhanced_bound_patience: 20
      attack_patience: 80
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_primary_spec: null
      sb_primary_spec_iter: 1
      sb_sum: false
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_zero_crossing_score: false
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 10000
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  adv_saver: default_adv_saver
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0

Experiments at Fri Dec 22 08:20:52 2023 on kali
no customized start/end sample, testing all samples in instances.csv
Internal results will be saved to out.txt.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx onnx/ACASXU_run2a_1_1_batch_2000.onnx
Using vnnlib vnnlib/prop_1.vnnlib
Precompiled vnnlib file found at ../../vnncomp2023_benchmarks/benchmarks/acasxu/vnnlib/prop_1.vnnlib.compiled
Loading onnx ../../vnncomp2023_benchmarks/benchmarks/acasxu/onnx/ACASXU_run2a_1_1_batch_2000.onnx wih quirks {}
/home/kali/.local/lib/python3.11/site-packages/onnx2pytorch/convert/operations.py:154: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at ../torch/csrc/utils/tensor_numpy.cpp:206.)
  weight = torch.from_numpy(numpy_helper.to_array(params[0]))
/home/kali/.local/lib/python3.11/site-packages/onnx2pytorch/convert/model.py:151: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  warnings.warn(
Attack parameters: initialization=uniform, steps=100, restarts=10000, alpha=0.125, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.02068046, -0.01759025, -0.01798429, -0.01753411, -0.01775688]])
100%|████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:04<00:00,  4.17s/it]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01778586, -0.01307883, -0.01785352, -0.01216570, -0.01702607]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.00891161]]])
number of violation:  0
Attack finished in 4.2292 seconds.
PGD attack failed
Total VNNLIB file length: 1, max property batch size: 1, total number of batches: 1

Properties batch 0, size 1
Remaining timeout: 111.68702697753906
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.]]], dtype=torch.float64)
thresholds: tensor([-3.99112558]) ######
/home/kali/alpha-beta-CROWN/complete_verifier/auto_LiRPA/parse_graph.py:154: FutureWarning: 'torch.onnx.symbolic_helper._set_opset_version' is deprecated in version 1.13 and will be removed in 2.0. Please remove its usage and avoid setting internal variables directly.
  _set_opset_version(12)
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=False)
  (/1): BoundBuffers(name=/1, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundParams(name=/17, inputs=[], perturbed=False)
  (/18): BoundParams(name=/18, inputs=[], perturbed=False)
  (/19): BoundParams(name=/19, inputs=[], perturbed=False)
  (/20): BoundParams(name=/20, inputs=[], perturbed=False)
  (/21): BoundParams(name=/21, inputs=[], perturbed=False)
  (/22): BoundParams(name=/22, inputs=[], perturbed=False)
  (/23): BoundParams(name=/23, inputs=[], perturbed=False)
  (/24): BoundParams(name=/24, inputs=[], perturbed=False)
  (/25): BoundParams(name=/25, inputs=[], perturbed=False)
  (/26): BoundParams(name=/26, inputs=[], perturbed=False)
  (/27): BoundParams(name=/27, inputs=[], perturbed=False)
  (/28): BoundParams(name=/28, inputs=[], perturbed=False)
  (/29): BoundParams(name=/29, inputs=[], perturbed=False)
  (/30): BoundSub(name=/30, inputs=[/0, /1], perturbed=False)
  (/31): BoundFlatten(name=/31, inputs=[/30], perturbed=False)
  (/input): BoundLinear(name=/input, inputs=[/31, /16, /17], perturbed=False)
  (/33): BoundRelu(name=/33, inputs=[/input], perturbed=False)
  (/input.3): BoundLinear(name=/input.3, inputs=[/33, /18, /19], perturbed=False)
  (/35): BoundRelu(name=/35, inputs=[/input.3], perturbed=False)
  (/input.7): BoundLinear(name=/input.7, inputs=[/35, /20, /21], perturbed=False)
  (/37): BoundRelu(name=/37, inputs=[/input.7], perturbed=False)
  (/input.11): BoundLinear(name=/input.11, inputs=[/37, /22, /23], perturbed=False)
  (/39): BoundRelu(name=/39, inputs=[/input.11], perturbed=False)
  (/input.15): BoundLinear(name=/input.15, inputs=[/39, /24, /25], perturbed=False)
  (/41): BoundRelu(name=/41, inputs=[/input.15], perturbed=False)
  (/input.19): BoundLinear(name=/input.19, inputs=[/41, /26, /27], perturbed=False)
  (/43): BoundRelu(name=/43, inputs=[/input.19], perturbed=False)
  (/44): BoundLinear(name=/44, inputs=[/43, /28, /29], perturbed=False)
)
Model prediction is: tensor([-0.02068046, -0.01759025, -0.01798429, -0.01753411, -0.01775688])
Split layers:
  BoundLinear(name=/input, inputs=[/31, /16, /17], perturbed=True): [(BoundRelu(name=/33, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/33, /18, /19], perturbed=True): [(BoundRelu(name=/35, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/35, /20, /21], perturbed=True): [(BoundRelu(name=/37, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/37, /22, /23], perturbed=True): [(BoundRelu(name=/39, inputs=[/input.11], perturbed=True), 0)]
  BoundLinear(name=/input.15, inputs=[/39, /24, /25], perturbed=True): [(BoundRelu(name=/41, inputs=[/input.15], perturbed=True), 0)]
  BoundLinear(name=/input.19, inputs=[/41, /26, /27], perturbed=True): [(BoundRelu(name=/43, inputs=[/input.19], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/33, inputs=[/input], perturbed=True)
   BoundRelu(name=/35, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/37, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/39, inputs=[/input.11], perturbed=True)
   BoundRelu(name=/41, inputs=[/input.15], perturbed=True)
   BoundRelu(name=/43, inputs=[/input.19], perturbed=True)
initial crown bounds: tensor([[-1662.18823242]])
Worst class: (+ rhs) -1662.188232421875
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01925012, -0.01461155, -0.01841660, -0.01395121, -0.01780950]]],
       grad_fn=<SliceBackward0>)
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.01037550]]], grad_fn=<SliceBackward0>)
number of violation:  0
Iteration 1
Batch size: 1000
Worst bound: tensor([-421.77917480])
Total time: 0.1128  pickout: 0.0002 decision: 0.0191  bounding: 0.0929 add_domain: 0.0007
length of domains: 32
32 branch and bound domains visited
Current (lb-rhs): -421.7791748046875
Cumulative time: 0.6598584651947021

Iteration 2
Adv attack time: 10.6953s
Batch size: 1000
Worst bound: tensor([-138.94528198])
Total time: 0.1936  pickout: 0.0013 decision: 0.0037  bounding: 0.1878 add_domain: 0.0008
length of domains: 48
96 branch and bound domains visited
Current (lb-rhs): -138.94528198242188
Cumulative time: 11.549891233444214

Iteration 3
Adv attack time: 8.0778s
Batch size: 1000
Worst bound: tensor([-81.14127350])
Total time: 0.2305  pickout: 0.0002 decision: 0.0009  bounding: 0.2288 add_domain: 0.0006
length of domains: 60
192 branch and bound domains visited
Current (lb-rhs): -81.14127349853516
Cumulative time: 19.85931396484375

Iteration 4
Adv attack time: 7.3106s
Batch size: 1000
Worst bound: tensor([-40.60110474])
Total time: 0.1942  pickout: 0.0002 decision: 0.0012  bounding: 0.1921 add_domain: 0.0005
length of domains: 36
312 branch and bound domains visited
Current (lb-rhs): -40.601104736328125
Cumulative time: 27.365522861480713

Iteration 5
Adv attack time: 6.9922s
Batch size: 1000
Worst bound: tensor([-20.56921959])
Total time: 0.1231  pickout: 0.0002 decision: 0.0009  bounding: 0.1214 add_domain: 0.0005
length of domains: 24
384 branch and bound domains visited
Current (lb-rhs): -20.5692195892334
Cumulative time: 34.482089042663574

Iteration 6
Adv attack time: 7.6550s
Batch size: 1000
Worst bound: tensor([-5.27437639])
Total time: 0.2281  pickout: 0.0003 decision: 0.0014  bounding: 0.2257 add_domain: 0.0007
length of domains: 8
480 branch and bound domains visited
Current (lb-rhs): -5.274376392364502
Cumulative time: 42.36611247062683

Iteration 7
Adv attack time: 6.7616s
Batch size: 1000
Worst bound: tensor([3.98403049])
Total time: 0.1088  pickout: 0.0002 decision: 0.0019  bounding: 0.1062 add_domain: 0.0005
length of domains: 0
544 branch and bound domains visited
No domains left, verification finished!
The lower bound of last batch is -0.007095064967870712
Cumulative time: 49.23783493041992

Result: safe in 53.8517 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx onnx/ACASXU_run2a_1_2_batch_2000.onnx
Using vnnlib vnnlib/prop_1.vnnlib
Precompiled vnnlib file found at ../../vnncomp2023_benchmarks/benchmarks/acasxu/vnnlib/prop_1.vnnlib.compiled
Loading onnx ../../vnncomp2023_benchmarks/benchmarks/acasxu/onnx/ACASXU_run2a_1_2_batch_2000.onnx wih quirks {}
Attack parameters: initialization=uniform, steps=100, restarts=10000, alpha=0.125, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.02039660, -0.01847512, -0.01822629, -0.01796024, -0.01798192]])
100%|████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:07<00:00,  7.30s/it]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01788809, -0.01838506, -0.01692944, -0.01789654, -0.01690798]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.00901365]]])
number of violation:  0
Attack finished in 7.3118 seconds.
PGD attack failed
Total VNNLIB file length: 1, max property batch size: 1, total number of batches: 1

Properties batch 0, size 1
Remaining timeout: 108.63927602767944
##### Instance 1 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.]]], dtype=torch.float64)
thresholds: tensor([-3.99112558]) ######
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=False)
  (/1): BoundBuffers(name=/1, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundParams(name=/17, inputs=[], perturbed=False)
  (/18): BoundParams(name=/18, inputs=[], perturbed=False)
  (/19): BoundParams(name=/19, inputs=[], perturbed=False)
  (/20): BoundParams(name=/20, inputs=[], perturbed=False)
  (/21): BoundParams(name=/21, inputs=[], perturbed=False)
  (/22): BoundParams(name=/22, inputs=[], perturbed=False)
  (/23): BoundParams(name=/23, inputs=[], perturbed=False)
  (/24): BoundParams(name=/24, inputs=[], perturbed=False)
  (/25): BoundParams(name=/25, inputs=[], perturbed=False)
  (/26): BoundParams(name=/26, inputs=[], perturbed=False)
  (/27): BoundParams(name=/27, inputs=[], perturbed=False)
  (/28): BoundParams(name=/28, inputs=[], perturbed=False)
  (/29): BoundParams(name=/29, inputs=[], perturbed=False)
  (/30): BoundSub(name=/30, inputs=[/0, /1], perturbed=False)
  (/31): BoundFlatten(name=/31, inputs=[/30], perturbed=False)
  (/input): BoundLinear(name=/input, inputs=[/31, /16, /17], perturbed=False)
  (/33): BoundRelu(name=/33, inputs=[/input], perturbed=False)
  (/input.3): BoundLinear(name=/input.3, inputs=[/33, /18, /19], perturbed=False)
  (/35): BoundRelu(name=/35, inputs=[/input.3], perturbed=False)
  (/input.7): BoundLinear(name=/input.7, inputs=[/35, /20, /21], perturbed=False)
  (/37): BoundRelu(name=/37, inputs=[/input.7], perturbed=False)
  (/input.11): BoundLinear(name=/input.11, inputs=[/37, /22, /23], perturbed=False)
  (/39): BoundRelu(name=/39, inputs=[/input.11], perturbed=False)
  (/input.15): BoundLinear(name=/input.15, inputs=[/39, /24, /25], perturbed=False)
  (/41): BoundRelu(name=/41, inputs=[/input.15], perturbed=False)
  (/input.19): BoundLinear(name=/input.19, inputs=[/41, /26, /27], perturbed=False)
  (/43): BoundRelu(name=/43, inputs=[/input.19], perturbed=False)
  (/44): BoundLinear(name=/44, inputs=[/43, /28, /29], perturbed=False)
)
Model prediction is: tensor([-0.02039660, -0.01847511, -0.01822628, -0.01796024, -0.01798192])
Split layers:
  BoundLinear(name=/input, inputs=[/31, /16, /17], perturbed=True): [(BoundRelu(name=/33, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/33, /18, /19], perturbed=True): [(BoundRelu(name=/35, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/35, /20, /21], perturbed=True): [(BoundRelu(name=/37, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/37, /22, /23], perturbed=True): [(BoundRelu(name=/39, inputs=[/input.11], perturbed=True), 0)]
  BoundLinear(name=/input.15, inputs=[/39, /24, /25], perturbed=True): [(BoundRelu(name=/41, inputs=[/input.15], perturbed=True), 0)]
  BoundLinear(name=/input.19, inputs=[/41, /26, /27], perturbed=True): [(BoundRelu(name=/43, inputs=[/input.19], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/33, inputs=[/input], perturbed=True)
   BoundRelu(name=/35, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/37, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/39, inputs=[/input.11], perturbed=True)
   BoundRelu(name=/41, inputs=[/input.15], perturbed=True)
   BoundRelu(name=/43, inputs=[/input.19], perturbed=True)
initial crown bounds: tensor([[-1606.83227539]])
Worst class: (+ rhs) -1606.832275390625
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.02028450, -0.01930850, -0.01915700, -0.01891280, -0.01891970]]],
       grad_fn=<SliceBackward0>)
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.01141024]]], grad_fn=<SliceBackward0>)
number of violation:  0
Iteration 1
Batch size: 1000
Worst bound: tensor([-276.26962280])
Total time: 0.1716  pickout: 0.0002 decision: 0.0027  bounding: 0.1679 add_domain: 0.0007
length of domains: 32
32 branch and bound domains visited
Current (lb-rhs): -276.2696228027344
Cumulative time: 0.8682553768157959

Iteration 2
Adv attack time: 8.6102s
Batch size: 1000
Worst bound: tensor([-185.34463501])
Total time: 0.1416  pickout: 0.0003 decision: 0.0010  bounding: 0.1398 add_domain: 0.0006
length of domains: 64
96 branch and bound domains visited
Current (lb-rhs): -185.34463500976562
Cumulative time: 9.621711730957031

Iteration 3
Adv attack time: 7.9168s
Batch size: 1000
Worst bound: tensor([-148.81782532])
Total time: 0.2409  pickout: 0.0003 decision: 0.0009  bounding: 0.2391 add_domain: 0.0006
length of domains: 80
224 branch and bound domains visited
Current (lb-rhs): -148.8178253173828
Cumulative time: 17.78067135810852

Iteration 4
Adv attack time: 10.2626s
Batch size: 1000
Worst bound: tensor([-30.50810814])
Total time: 0.2576  pickout: 0.0006 decision: 0.0017  bounding: 0.2547 add_domain: 0.0006
length of domains: 48
384 branch and bound domains visited
Current (lb-rhs): -30.508108139038086
Cumulative time: 28.30291223526001

Iteration 5
Adv attack time: 7.7876s
Batch size: 1000
Worst bound: tensor([-13.82365036])
Total time: 0.1839  pickout: 0.0002 decision: 0.0011  bounding: 0.1815 add_domain: 0.0011
length of domains: 45
480 branch and bound domains visited
Current (lb-rhs): -13.823650360107422
Cumulative time: 36.27806210517883

Iteration 6
Adv attack time: 8.3685s
Batch size: 1000
Worst bound: tensor([1.40821171])
Total time: 0.1855  pickout: 0.0004 decision: 0.0013  bounding: 0.1834 add_domain: 0.0005
length of domains: 0
570 branch and bound domains visited
No domains left, verification finished!
The lower bound of last batch is -2.582913875579834
Cumulative time: 44.834033489227295

Result: safe in 52.4638 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx onnx/ACASXU_run2a_1_3_batch_2000.onnx
Using vnnlib vnnlib/prop_1.vnnlib
Precompiled vnnlib file found at ../../vnncomp2023_benchmarks/benchmarks/acasxu/vnnlib/prop_1.vnnlib.compiled
Loading onnx ../../vnncomp2023_benchmarks/benchmarks/acasxu/onnx/ACASXU_run2a_1_3_batch_2000.onnx wih quirks {}
Attack parameters: initialization=uniform, steps=100, restarts=10000, alpha=0.125, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.01961341, -0.01542064, -0.01617118, -0.01653932, -0.01645088]])
100%|████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:05<00:00,  5.39s/it]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01632218, -0.01734619, -0.01719859, -0.01820486, -0.01696486]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.00744772]]])
number of violation:  0
Attack finished in 5.4110 seconds.
PGD attack failed
Total VNNLIB file length: 1, max property batch size: 1, total number of batches: 1

Properties batch 0, size 1
Remaining timeout: 110.54781699180603
##### Instance 2 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.]]], dtype=torch.float64)
thresholds: tensor([-3.99112558]) ######
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=False)
  (/1): BoundBuffers(name=/1, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundParams(name=/17, inputs=[], perturbed=False)
  (/18): BoundParams(name=/18, inputs=[], perturbed=False)
  (/19): BoundParams(name=/19, inputs=[], perturbed=False)
  (/20): BoundParams(name=/20, inputs=[], perturbed=False)
  (/21): BoundParams(name=/21, inputs=[], perturbed=False)
  (/22): BoundParams(name=/22, inputs=[], perturbed=False)
  (/23): BoundParams(name=/23, inputs=[], perturbed=False)
  (/24): BoundParams(name=/24, inputs=[], perturbed=False)
  (/25): BoundParams(name=/25, inputs=[], perturbed=False)
  (/26): BoundParams(name=/26, inputs=[], perturbed=False)
  (/27): BoundParams(name=/27, inputs=[], perturbed=False)
  (/28): BoundParams(name=/28, inputs=[], perturbed=False)
  (/29): BoundParams(name=/29, inputs=[], perturbed=False)
  (/30): BoundSub(name=/30, inputs=[/0, /1], perturbed=False)
  (/31): BoundFlatten(name=/31, inputs=[/30], perturbed=False)
  (/input): BoundLinear(name=/input, inputs=[/31, /16, /17], perturbed=False)
  (/33): BoundRelu(name=/33, inputs=[/input], perturbed=False)
  (/input.3): BoundLinear(name=/input.3, inputs=[/33, /18, /19], perturbed=False)
  (/35): BoundRelu(name=/35, inputs=[/input.3], perturbed=False)
  (/input.7): BoundLinear(name=/input.7, inputs=[/35, /20, /21], perturbed=False)
  (/37): BoundRelu(name=/37, inputs=[/input.7], perturbed=False)
  (/input.11): BoundLinear(name=/input.11, inputs=[/37, /22, /23], perturbed=False)
  (/39): BoundRelu(name=/39, inputs=[/input.11], perturbed=False)
  (/input.15): BoundLinear(name=/input.15, inputs=[/39, /24, /25], perturbed=False)
  (/41): BoundRelu(name=/41, inputs=[/input.15], perturbed=False)
  (/input.19): BoundLinear(name=/input.19, inputs=[/41, /26, /27], perturbed=False)
  (/43): BoundRelu(name=/43, inputs=[/input.19], perturbed=False)
  (/44): BoundLinear(name=/44, inputs=[/43, /28, /29], perturbed=False)
)
Model prediction is: tensor([-0.01961341, -0.01542064, -0.01617118, -0.01653932, -0.01645088])
Split layers:
  BoundLinear(name=/input, inputs=[/31, /16, /17], perturbed=True): [(BoundRelu(name=/33, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/33, /18, /19], perturbed=True): [(BoundRelu(name=/35, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/35, /20, /21], perturbed=True): [(BoundRelu(name=/37, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/37, /22, /23], perturbed=True): [(BoundRelu(name=/39, inputs=[/input.11], perturbed=True), 0)]
  BoundLinear(name=/input.15, inputs=[/39, /24, /25], perturbed=True): [(BoundRelu(name=/41, inputs=[/input.15], perturbed=True), 0)]
  BoundLinear(name=/input.19, inputs=[/41, /26, /27], perturbed=True): [(BoundRelu(name=/43, inputs=[/input.19], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/33, inputs=[/input], perturbed=True)
   BoundRelu(name=/35, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/37, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/39, inputs=[/input.11], perturbed=True)
   BoundRelu(name=/41, inputs=[/input.15], perturbed=True)
   BoundRelu(name=/43, inputs=[/input.19], perturbed=True)
initial crown bounds: tensor([[-4892.49707031]])
Worst class: (+ rhs) -4892.4970703125
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01925302, -0.01871731, -0.01692475, -0.01869632, -0.01561667]]],
       grad_fn=<SliceBackward0>)
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.01037884]]], grad_fn=<SliceBackward0>)
number of violation:  0
Iteration 1
Batch size: 1000
Worst bound: tensor([-2501.43066406])
Total time: 0.1344  pickout: 0.0002 decision: 0.0025  bounding: 0.1312 add_domain: 0.0005
length of domains: 32
32 branch and bound domains visited
Current (lb-rhs): -2501.4306640625
Cumulative time: 0.754357099533081

Iteration 2
Adv attack time: 8.4549s
Batch size: 1000
Worst bound: tensor([-823.28222656])
Total time: 0.3670  pickout: 0.0002 decision: 0.0021  bounding: 0.3637 add_domain: 0.0009
length of domains: 64
96 branch and bound domains visited
Current (lb-rhs): -823.2822265625
Cumulative time: 9.59918999671936

Iteration 3
Adv attack time: 8.9509s
Batch size: 1000
Worst bound: tensor([-494.46154785])
Total time: 0.1960  pickout: 0.0004 decision: 0.0011  bounding: 0.1939 add_domain: 0.0006
length of domains: 88
224 branch and bound domains visited
Current (lb-rhs): -494.4615478515625
Cumulative time: 18.74723505973816

Iteration 4
Adv attack time: 8.4019s
Batch size: 1000
Worst bound: tensor([-261.75402832])
Total time: 0.3548  pickout: 0.0002 decision: 0.0016  bounding: 0.3520 add_domain: 0.0009
length of domains: 138
400 branch and bound domains visited
Current (lb-rhs): -261.7540283203125
Cumulative time: 27.50507688522339

Iteration 5
Adv attack time: 8.2790s
Batch size: 1000
Worst bound: tensor([-31.49073601])
Total time: 0.4401  pickout: 0.0002 decision: 0.0010  bounding: 0.4383 add_domain: 0.0006
length of domains: 114
676 branch and bound domains visited
Current (lb-rhs): -31.49073600769043
Cumulative time: 36.225008487701416

Iteration 6
Adv attack time: 7.9260s
Batch size: 1000
Worst bound: tensor([-5.19449759])
Total time: 0.3223  pickout: 0.0004 decision: 0.0012  bounding: 0.3199 add_domain: 0.0008
length of domains: 19
904 branch and bound domains visited
Current (lb-rhs): -5.194497585296631
Cumulative time: 44.474350452423096

Iteration 7
Adv attack time: 7.4624s
Batch size: 1000
Worst bound: tensor([0.35296488])
Total time: 0.1349  pickout: 0.0003 decision: 0.0022  bounding: 0.1317 add_domain: 0.0007
length of domains: 0
980 branch and bound domains visited
No domains left, verification finished!
The lower bound of last batch is -3.6381607055664062
Cumulative time: 52.07241487503052

Result: safe in 57.7844 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx onnx/ACASXU_run2a_1_4_batch_2000.onnx
Using vnnlib vnnlib/prop_1.vnnlib
Precompiled vnnlib file found at ../../vnncomp2023_benchmarks/benchmarks/acasxu/vnnlib/prop_1.vnnlib.compiled
Loading onnx ../../vnncomp2023_benchmarks/benchmarks/acasxu/onnx/ACASXU_run2a_1_4_batch_2000.onnx wih quirks {}
Attack parameters: initialization=uniform, steps=100, restarts=10000, alpha=0.125, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.02027765, -0.01752215, -0.01707148, -0.01663717, -0.01708926]])
100%|████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:04<00:00,  4.26s/it]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01671726, -0.01832396, -0.01697747, -0.01721714, -0.01658819]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.00784302]]])
number of violation:  0
Attack finished in 4.2715 seconds.
PGD attack failed
Total VNNLIB file length: 1, max property batch size: 1, total number of batches: 1

Properties batch 0, size 1
Remaining timeout: 111.70218968391418
##### Instance 3 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.]]], dtype=torch.float64)
thresholds: tensor([-3.99112558]) ######
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=False)
  (/1): BoundBuffers(name=/1, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundParams(name=/17, inputs=[], perturbed=False)
  (/18): BoundParams(name=/18, inputs=[], perturbed=False)
  (/19): BoundParams(name=/19, inputs=[], perturbed=False)
  (/20): BoundParams(name=/20, inputs=[], perturbed=False)
  (/21): BoundParams(name=/21, inputs=[], perturbed=False)
  (/22): BoundParams(name=/22, inputs=[], perturbed=False)
  (/23): BoundParams(name=/23, inputs=[], perturbed=False)
  (/24): BoundParams(name=/24, inputs=[], perturbed=False)
  (/25): BoundParams(name=/25, inputs=[], perturbed=False)
  (/26): BoundParams(name=/26, inputs=[], perturbed=False)
  (/27): BoundParams(name=/27, inputs=[], perturbed=False)
  (/28): BoundParams(name=/28, inputs=[], perturbed=False)
  (/29): BoundParams(name=/29, inputs=[], perturbed=False)
  (/30): BoundSub(name=/30, inputs=[/0, /1], perturbed=False)
  (/31): BoundFlatten(name=/31, inputs=[/30], perturbed=False)
  (/input): BoundLinear(name=/input, inputs=[/31, /16, /17], perturbed=False)
  (/33): BoundRelu(name=/33, inputs=[/input], perturbed=False)
  (/input.3): BoundLinear(name=/input.3, inputs=[/33, /18, /19], perturbed=False)
  (/35): BoundRelu(name=/35, inputs=[/input.3], perturbed=False)
  (/input.7): BoundLinear(name=/input.7, inputs=[/35, /20, /21], perturbed=False)
  (/37): BoundRelu(name=/37, inputs=[/input.7], perturbed=False)
  (/input.11): BoundLinear(name=/input.11, inputs=[/37, /22, /23], perturbed=False)
  (/39): BoundRelu(name=/39, inputs=[/input.11], perturbed=False)
  (/input.15): BoundLinear(name=/input.15, inputs=[/39, /24, /25], perturbed=False)
  (/41): BoundRelu(name=/41, inputs=[/input.15], perturbed=False)
  (/input.19): BoundLinear(name=/input.19, inputs=[/41, /26, /27], perturbed=False)
  (/43): BoundRelu(name=/43, inputs=[/input.19], perturbed=False)
  (/44): BoundLinear(name=/44, inputs=[/43, /28, /29], perturbed=False)
)
Model prediction is: tensor([-0.02027765, -0.01752216, -0.01707149, -0.01663717, -0.01708926])
Split layers:
  BoundLinear(name=/input, inputs=[/31, /16, /17], perturbed=True): [(BoundRelu(name=/33, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/33, /18, /19], perturbed=True): [(BoundRelu(name=/35, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/35, /20, /21], perturbed=True): [(BoundRelu(name=/37, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/37, /22, /23], perturbed=True): [(BoundRelu(name=/39, inputs=[/input.11], perturbed=True), 0)]
  BoundLinear(name=/input.15, inputs=[/39, /24, /25], perturbed=True): [(BoundRelu(name=/41, inputs=[/input.15], perturbed=True), 0)]
  BoundLinear(name=/input.19, inputs=[/41, /26, /27], perturbed=True): [(BoundRelu(name=/43, inputs=[/input.19], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/33, inputs=[/input], perturbed=True)
   BoundRelu(name=/35, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/37, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/39, inputs=[/input.11], perturbed=True)
   BoundRelu(name=/41, inputs=[/input.15], perturbed=True)
   BoundRelu(name=/43, inputs=[/input.19], perturbed=True)
initial crown bounds: tensor([[-634.17193604]])
Worst class: (+ rhs) -634.1719360351562
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.01964290, -0.01828214, -0.01693470, -0.01754072, -0.01681290]]],
       grad_fn=<SliceBackward0>)
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.01076841]]], grad_fn=<SliceBackward0>)
number of violation:  0
Iteration 1
Batch size: 1000
Worst bound: tensor([-183.53106689])
Total time: 0.1343  pickout: 0.0003 decision: 0.0028  bounding: 0.1297 add_domain: 0.0015
length of domains: 32
32 branch and bound domains visited
Current (lb-rhs): -183.53106689453125
Cumulative time: 0.7395946979522705

Iteration 2
Adv attack time: 7.9283s
Batch size: 1000
Worst bound: tensor([-118.49503326])
Total time: 0.1707  pickout: 0.0002 decision: 0.0010  bounding: 0.1688 add_domain: 0.0007
length of domains: 56
96 branch and bound domains visited
Current (lb-rhs): -118.49503326416016
Cumulative time: 8.840065002441406

Iteration 3
Adv attack time: 8.1910s
Batch size: 1000
Worst bound: tensor([-43.11913300])
Total time: 0.1759  pickout: 0.0003 decision: 0.0009  bounding: 0.1740 add_domain: 0.0006
length of domains: 72
208 branch and bound domains visited
Current (lb-rhs): -43.11913299560547
Cumulative time: 17.208305835723877

Iteration 4
Adv attack time: 7.6262s
Batch size: 1000
Worst bound: tensor([-17.43737030])
Total time: 0.2388  pickout: 0.0002 decision: 0.0010  bounding: 0.2369 add_domain: 0.0008
length of domains: 80
352 branch and bound domains visited
Current (lb-rhs): -17.43737030029297
Cumulative time: 25.07484197616577

Iteration 5
Adv attack time: 9.4881s
Batch size: 1000
Worst bound: tensor([-7.68544245])
Total time: 0.4141  pickout: 0.0009 decision: 0.0015  bounding: 0.4110 add_domain: 0.0007
length of domains: 92
512 branch and bound domains visited
Current (lb-rhs): -7.6854424476623535
Cumulative time: 34.98192834854126

Iteration 6
Adv attack time: 9.9717s
Batch size: 1000
Worst bound: tensor([-2.40673256])
Total time: 0.2546  pickout: 0.0003 decision: 0.0011  bounding: 0.2527 add_domain: 0.0005
length of domains: 9
696 branch and bound domains visited
Current (lb-rhs): -2.4067325592041016
Cumulative time: 45.20962595939636

Iteration 7
Adv attack time: 7.3213s
Batch size: 1000
Worst bound: tensor([3.82831764])
Total time: 0.1209  pickout: 0.0004 decision: 0.0023  bounding: 0.1177 add_domain: 0.0006
length of domains: 0
768 branch and bound domains visited
No domains left, verification finished!
The lower bound of last batch is -0.1628078669309616
Using enhanced bound propagation method alpha-crown with sb branching.
Split layers:
  BoundLinear(name=/input, inputs=[/31, /16, /17], perturbed=True): [(BoundRelu(name=/33, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/33, /18, /19], perturbed=True): [(BoundRelu(name=/35, inputs=[/input.3], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/35, /20, /21], perturbed=True): [(BoundRelu(name=/37, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/input.11, inputs=[/37, /22, /23], perturbed=True): [(BoundRelu(name=/39, inputs=[/input.11], perturbed=True), 0)]
  BoundLinear(name=/input.15, inputs=[/39, /24, /25], perturbed=True): [(BoundRelu(name=/41, inputs=[/input.15], perturbed=True), 0)]
  BoundLinear(name=/input.19, inputs=[/41, /26, /27], perturbed=True): [(BoundRelu(name=/43, inputs=[/input.19], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/33, inputs=[/input], perturbed=True)
   BoundRelu(name=/35, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/37, inputs=[/input.7], perturbed=True)
   BoundRelu(name=/39, inputs=[/input.11], perturbed=True)
   BoundRelu(name=/41, inputs=[/input.15], perturbed=True)
   BoundRelu(name=/43, inputs=[/input.19], perturbed=True)
layer /33 using sparse-features alpha with shape [24]; unstable size 24; total size 50 ([1, 50])
layer /33 start_node /input.3 using full alpha [2, 1, 1, 24] with unstable size None total_size 1 output_shape 1
layer /33 start_node /input.7 using full alpha [2, 1, 1, 24] with unstable size None total_size 1 output_shape 1
layer /33 start_node /input.11 using full alpha [2, 1, 1, 24] with unstable size None total_size 1 output_shape 1
layer /33 start_node /input.15 using full alpha [2, 1, 1, 24] with unstable size None total_size 1 output_shape 1
layer /33 start_node /input.19 using full alpha [2, 1, 1, 24] with unstable size None total_size 1 output_shape 1
layer /33 start_node /44 using full alpha [2, 1, 1, 24] with unstable size None total_size 1 output_shape 1
layer /35 using sparse-features alpha with shape [38]; unstable size 38; total size 50 ([1, 50])
layer /35 start_node /input.7 using full alpha [2, 1, 1, 38] with unstable size None total_size 1 output_shape 1
layer /35 start_node /input.11 using full alpha [2, 1, 1, 38] with unstable size None total_size 1 output_shape 1
layer /35 start_node /input.15 using full alpha [2, 1, 1, 38] with unstable size None total_size 1 output_shape 1
layer /35 start_node /input.19 using full alpha [2, 1, 1, 38] with unstable size None total_size 1 output_shape 1
layer /35 start_node /44 using full alpha [2, 1, 1, 38] with unstable size None total_size 1 output_shape 1
layer /37 using sparse-features alpha with shape [45]; unstable size 45; total size 50 ([1, 50])
layer /37 start_node /input.11 using full alpha [2, 1, 1, 45] with unstable size None total_size 1 output_shape 1
layer /37 start_node /input.15 using full alpha [2, 1, 1, 45] with unstable size None total_size 1 output_shape 1
layer /37 start_node /input.19 using full alpha [2, 1, 1, 45] with unstable size None total_size 1 output_shape 1
layer /37 start_node /44 using full alpha [2, 1, 1, 45] with unstable size None total_size 1 output_shape 1
layer /39 using full alpha with shape torch.Size([50]); unstable size 50; total size 50 ([1, 50])
layer /39 start_node /input.15 using full alpha [2, 1, 1, 50] with unstable size None total_size 1 output_shape 1
layer /39 start_node /input.19 using full alpha [2, 1, 1, 50] with unstable size None total_size 1 output_shape 1
layer /39 start_node /44 using full alpha [2, 1, 1, 50] with unstable size None total_size 1 output_shape 1
layer /41 using full alpha with shape torch.Size([50]); unstable size 50; total size 50 ([1, 50])
layer /41 start_node /input.19 using full alpha [2, 1, 1, 50] with unstable size None total_size 1 output_shape 1
layer /41 start_node /44 using full alpha [2, 1, 1, 50] with unstable size None total_size 1 output_shape 1
layer /43 using full alpha with shape torch.Size([50]); unstable size 50; total size 50 ([1, 50])
layer /43 start_node /44 using full alpha [2, 1, 1, 50] with unstable size None total_size 1 output_shape 1
Optimizable variables initialized.
initial CROWN bounds: tensor([[-634.17193604]]) None
best_l after optimization: -230.90382385253906
alpha/beta optimization time: 1.2740793228149414
initial alpha-crown bounds: tensor([[-230.90382385]])
Worst class: (+ rhs) -230.90382385253906
Cumulative time: 54.03182578086853

Iteration 8
Adv attack time: 1.3381s
Batch size: 1000
best_l after optimization: -2473.6904296875
alpha/beta optimization time: 1.8485302925109863
Total time: 1.9425  pickout: 0.0012 decision: 0.0033  bounding: 1.8722 add_domain: 0.0658
length of domains: 32
800 branch and bound domains visited
Current (lb-rhs): -84.52632141113281
Cumulative time: 57.314820289611816

Iteration 9
Adv attack time: 8.0351s
Batch size: 1000
best_l after optimization: -2136.456787109375
alpha/beta optimization time: 2.739229440689087
Total time: 2.7742  pickout: 0.0193 decision: 0.0012  bounding: 2.7512 add_domain: 0.0025
length of domains: 64
864 branch and bound domains visited
Current (lb-rhs): -43.97987747192383
Cumulative time: 68.12574505805969

Iteration 10
Adv attack time: 9.2301s
Batch size: 1000
best_l after optimization: -1896.753662109375
alpha/beta optimization time: 15.095747232437134
Total time: 15.2636  pickout: 0.1099 decision: 0.0018  bounding: 15.1482 add_domain: 0.0036
length of domains: 108
992 branch and bound domains visited
Current (lb-rhs): -22.617904663085938
Perform PGD attack with massively random starts finally.
zsh: killed     python abcrown.py --config exp_configs/vnncomp23/acasxu.yaml
